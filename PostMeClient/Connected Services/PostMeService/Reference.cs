//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PostMeClient.PostMeService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/PostMeService.Types")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string firstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int userIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string firstName {
            get {
                return this.firstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.firstNameField, value) != true)) {
                    this.firstNameField = value;
                    this.RaisePropertyChanged("firstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lastName {
            get {
                return this.lastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.lastNameField, value) != true)) {
                    this.lastNameField = value;
                    this.RaisePropertyChanged("lastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int userId {
            get {
                return this.userIdField;
            }
            set {
                if ((this.userIdField.Equals(value) != true)) {
                    this.userIdField = value;
                    this.RaisePropertyChanged("userId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Post", Namespace="http://schemas.datacontract.org/2004/07/PostMeService.Types")]
    [System.SerializableAttribute()]
    public partial class Post : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string headlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int postIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime timeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int upvotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PostMeClient.PostMeService.User userField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string headline {
            get {
                return this.headlineField;
            }
            set {
                if ((object.ReferenceEquals(this.headlineField, value) != true)) {
                    this.headlineField = value;
                    this.RaisePropertyChanged("headline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int postId {
            get {
                return this.postIdField;
            }
            set {
                if ((this.postIdField.Equals(value) != true)) {
                    this.postIdField = value;
                    this.RaisePropertyChanged("postId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime time {
            get {
                return this.timeField;
            }
            set {
                if ((this.timeField.Equals(value) != true)) {
                    this.timeField = value;
                    this.RaisePropertyChanged("time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int upvotes {
            get {
                return this.upvotesField;
            }
            set {
                if ((this.upvotesField.Equals(value) != true)) {
                    this.upvotesField = value;
                    this.RaisePropertyChanged("upvotes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostMeClient.PostMeService.User user {
            get {
                return this.userField;
            }
            set {
                if ((object.ReferenceEquals(this.userField, value) != true)) {
                    this.userField = value;
                    this.RaisePropertyChanged("user");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Comment", Namespace="http://schemas.datacontract.org/2004/07/PostMeService.Types")]
    [System.SerializableAttribute()]
    public partial class Comment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int commentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PostMeClient.PostMeService.Post postField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int replyOfCommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime timeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int upvotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PostMeClient.PostMeService.User userField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int commentId {
            get {
                return this.commentIdField;
            }
            set {
                if ((this.commentIdField.Equals(value) != true)) {
                    this.commentIdField = value;
                    this.RaisePropertyChanged("commentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostMeClient.PostMeService.Post post {
            get {
                return this.postField;
            }
            set {
                if ((object.ReferenceEquals(this.postField, value) != true)) {
                    this.postField = value;
                    this.RaisePropertyChanged("post");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int replyOfComment {
            get {
                return this.replyOfCommentField;
            }
            set {
                if ((this.replyOfCommentField.Equals(value) != true)) {
                    this.replyOfCommentField = value;
                    this.RaisePropertyChanged("replyOfComment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime time {
            get {
                return this.timeField;
            }
            set {
                if ((this.timeField.Equals(value) != true)) {
                    this.timeField = value;
                    this.RaisePropertyChanged("time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int upvotes {
            get {
                return this.upvotesField;
            }
            set {
                if ((this.upvotesField.Equals(value) != true)) {
                    this.upvotesField = value;
                    this.RaisePropertyChanged("upvotes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostMeClient.PostMeService.User user {
            get {
                return this.userField;
            }
            set {
                if ((object.ReferenceEquals(this.userField, value) != true)) {
                    this.userField = value;
                    this.RaisePropertyChanged("user");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PostMeService.IPostMeService")]
    public interface IPostMeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/getUser", ReplyAction="http://tempuri.org/IPostMeService/getUserResponse")]
        PostMeClient.PostMeService.User getUser(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/getUser", ReplyAction="http://tempuri.org/IPostMeService/getUserResponse")]
        System.Threading.Tasks.Task<PostMeClient.PostMeService.User> getUserAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/verify", ReplyAction="http://tempuri.org/IPostMeService/verifyResponse")]
        PostMeClient.PostMeService.User verify(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/verify", ReplyAction="http://tempuri.org/IPostMeService/verifyResponse")]
        System.Threading.Tasks.Task<PostMeClient.PostMeService.User> verifyAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/addUser", ReplyAction="http://tempuri.org/IPostMeService/addUserResponse")]
        int addUser(PostMeClient.PostMeService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/addUser", ReplyAction="http://tempuri.org/IPostMeService/addUserResponse")]
        System.Threading.Tasks.Task<int> addUserAsync(PostMeClient.PostMeService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/removeUser", ReplyAction="http://tempuri.org/IPostMeService/removeUserResponse")]
        void removeUser(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/removeUser", ReplyAction="http://tempuri.org/IPostMeService/removeUserResponse")]
        System.Threading.Tasks.Task removeUserAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/updateUser", ReplyAction="http://tempuri.org/IPostMeService/updateUserResponse")]
        PostMeClient.PostMeService.User updateUser(PostMeClient.PostMeService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/updateUser", ReplyAction="http://tempuri.org/IPostMeService/updateUserResponse")]
        System.Threading.Tasks.Task<PostMeClient.PostMeService.User> updateUserAsync(PostMeClient.PostMeService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/getPost", ReplyAction="http://tempuri.org/IPostMeService/getPostResponse")]
        PostMeClient.PostMeService.Post getPost(int postId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/getPost", ReplyAction="http://tempuri.org/IPostMeService/getPostResponse")]
        System.Threading.Tasks.Task<PostMeClient.PostMeService.Post> getPostAsync(int postId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/addPost", ReplyAction="http://tempuri.org/IPostMeService/addPostResponse")]
        int addPost(PostMeClient.PostMeService.Post post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/addPost", ReplyAction="http://tempuri.org/IPostMeService/addPostResponse")]
        System.Threading.Tasks.Task<int> addPostAsync(PostMeClient.PostMeService.Post post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/removePost", ReplyAction="http://tempuri.org/IPostMeService/removePostResponse")]
        void removePost(int postId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/removePost", ReplyAction="http://tempuri.org/IPostMeService/removePostResponse")]
        System.Threading.Tasks.Task removePostAsync(int postId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/updatePost", ReplyAction="http://tempuri.org/IPostMeService/updatePostResponse")]
        PostMeClient.PostMeService.Post updatePost(PostMeClient.PostMeService.Post post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/updatePost", ReplyAction="http://tempuri.org/IPostMeService/updatePostResponse")]
        System.Threading.Tasks.Task<PostMeClient.PostMeService.Post> updatePostAsync(PostMeClient.PostMeService.Post post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/filterPosts", ReplyAction="http://tempuri.org/IPostMeService/filterPostsResponse")]
        PostMeClient.PostMeService.Post[] filterPosts(int page, System.Nullable<int> userId, string headline, System.Nullable<System.DateTime> date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/filterPosts", ReplyAction="http://tempuri.org/IPostMeService/filterPostsResponse")]
        System.Threading.Tasks.Task<PostMeClient.PostMeService.Post[]> filterPostsAsync(int page, System.Nullable<int> userId, string headline, System.Nullable<System.DateTime> date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/getComment", ReplyAction="http://tempuri.org/IPostMeService/getCommentResponse")]
        PostMeClient.PostMeService.Comment getComment(int commentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/getComment", ReplyAction="http://tempuri.org/IPostMeService/getCommentResponse")]
        System.Threading.Tasks.Task<PostMeClient.PostMeService.Comment> getCommentAsync(int commentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/addComment", ReplyAction="http://tempuri.org/IPostMeService/addCommentResponse")]
        int addComment(PostMeClient.PostMeService.Comment comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/addComment", ReplyAction="http://tempuri.org/IPostMeService/addCommentResponse")]
        System.Threading.Tasks.Task<int> addCommentAsync(PostMeClient.PostMeService.Comment comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/removeComment", ReplyAction="http://tempuri.org/IPostMeService/removeCommentResponse")]
        void removeComment(int commentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/removeComment", ReplyAction="http://tempuri.org/IPostMeService/removeCommentResponse")]
        System.Threading.Tasks.Task removeCommentAsync(int commentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/updateComment", ReplyAction="http://tempuri.org/IPostMeService/updateCommentResponse")]
        PostMeClient.PostMeService.Comment updateComment(PostMeClient.PostMeService.Comment comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/updateComment", ReplyAction="http://tempuri.org/IPostMeService/updateCommentResponse")]
        System.Threading.Tasks.Task<PostMeClient.PostMeService.Comment> updateCommentAsync(PostMeClient.PostMeService.Comment comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/filterComments", ReplyAction="http://tempuri.org/IPostMeService/filterCommentsResponse")]
        PostMeClient.PostMeService.Comment[] filterComments(System.Nullable<int> userId, System.Nullable<int> postId, System.Nullable<System.DateTime> date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostMeService/filterComments", ReplyAction="http://tempuri.org/IPostMeService/filterCommentsResponse")]
        System.Threading.Tasks.Task<PostMeClient.PostMeService.Comment[]> filterCommentsAsync(System.Nullable<int> userId, System.Nullable<int> postId, System.Nullable<System.DateTime> date);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPostMeServiceChannel : PostMeClient.PostMeService.IPostMeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostMeServiceClient : System.ServiceModel.ClientBase<PostMeClient.PostMeService.IPostMeService>, PostMeClient.PostMeService.IPostMeService {
        
        public PostMeServiceClient() {
        }
        
        public PostMeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PostMeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PostMeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PostMeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PostMeClient.PostMeService.User getUser(int userId) {
            return base.Channel.getUser(userId);
        }
        
        public System.Threading.Tasks.Task<PostMeClient.PostMeService.User> getUserAsync(int userId) {
            return base.Channel.getUserAsync(userId);
        }
        
        public PostMeClient.PostMeService.User verify(string username, string password) {
            return base.Channel.verify(username, password);
        }
        
        public System.Threading.Tasks.Task<PostMeClient.PostMeService.User> verifyAsync(string username, string password) {
            return base.Channel.verifyAsync(username, password);
        }
        
        public int addUser(PostMeClient.PostMeService.User user) {
            return base.Channel.addUser(user);
        }
        
        public System.Threading.Tasks.Task<int> addUserAsync(PostMeClient.PostMeService.User user) {
            return base.Channel.addUserAsync(user);
        }
        
        public void removeUser(int userId) {
            base.Channel.removeUser(userId);
        }
        
        public System.Threading.Tasks.Task removeUserAsync(int userId) {
            return base.Channel.removeUserAsync(userId);
        }
        
        public PostMeClient.PostMeService.User updateUser(PostMeClient.PostMeService.User user) {
            return base.Channel.updateUser(user);
        }
        
        public System.Threading.Tasks.Task<PostMeClient.PostMeService.User> updateUserAsync(PostMeClient.PostMeService.User user) {
            return base.Channel.updateUserAsync(user);
        }
        
        public PostMeClient.PostMeService.Post getPost(int postId) {
            return base.Channel.getPost(postId);
        }
        
        public System.Threading.Tasks.Task<PostMeClient.PostMeService.Post> getPostAsync(int postId) {
            return base.Channel.getPostAsync(postId);
        }
        
        public int addPost(PostMeClient.PostMeService.Post post) {
            return base.Channel.addPost(post);
        }
        
        public System.Threading.Tasks.Task<int> addPostAsync(PostMeClient.PostMeService.Post post) {
            return base.Channel.addPostAsync(post);
        }
        
        public void removePost(int postId) {
            base.Channel.removePost(postId);
        }
        
        public System.Threading.Tasks.Task removePostAsync(int postId) {
            return base.Channel.removePostAsync(postId);
        }
        
        public PostMeClient.PostMeService.Post updatePost(PostMeClient.PostMeService.Post post) {
            return base.Channel.updatePost(post);
        }
        
        public System.Threading.Tasks.Task<PostMeClient.PostMeService.Post> updatePostAsync(PostMeClient.PostMeService.Post post) {
            return base.Channel.updatePostAsync(post);
        }
        
        public PostMeClient.PostMeService.Post[] filterPosts(int page, System.Nullable<int> userId, string headline, System.Nullable<System.DateTime> date) {
            return base.Channel.filterPosts(page, userId, headline, date);
        }
        
        public System.Threading.Tasks.Task<PostMeClient.PostMeService.Post[]> filterPostsAsync(int page, System.Nullable<int> userId, string headline, System.Nullable<System.DateTime> date) {
            return base.Channel.filterPostsAsync(page, userId, headline, date);
        }
        
        public PostMeClient.PostMeService.Comment getComment(int commentId) {
            return base.Channel.getComment(commentId);
        }
        
        public System.Threading.Tasks.Task<PostMeClient.PostMeService.Comment> getCommentAsync(int commentId) {
            return base.Channel.getCommentAsync(commentId);
        }
        
        public int addComment(PostMeClient.PostMeService.Comment comment) {
            return base.Channel.addComment(comment);
        }
        
        public System.Threading.Tasks.Task<int> addCommentAsync(PostMeClient.PostMeService.Comment comment) {
            return base.Channel.addCommentAsync(comment);
        }
        
        public void removeComment(int commentId) {
            base.Channel.removeComment(commentId);
        }
        
        public System.Threading.Tasks.Task removeCommentAsync(int commentId) {
            return base.Channel.removeCommentAsync(commentId);
        }
        
        public PostMeClient.PostMeService.Comment updateComment(PostMeClient.PostMeService.Comment comment) {
            return base.Channel.updateComment(comment);
        }
        
        public System.Threading.Tasks.Task<PostMeClient.PostMeService.Comment> updateCommentAsync(PostMeClient.PostMeService.Comment comment) {
            return base.Channel.updateCommentAsync(comment);
        }
        
        public PostMeClient.PostMeService.Comment[] filterComments(System.Nullable<int> userId, System.Nullable<int> postId, System.Nullable<System.DateTime> date) {
            return base.Channel.filterComments(userId, postId, date);
        }
        
        public System.Threading.Tasks.Task<PostMeClient.PostMeService.Comment[]> filterCommentsAsync(System.Nullable<int> userId, System.Nullable<int> postId, System.Nullable<System.DateTime> date) {
            return base.Channel.filterCommentsAsync(userId, postId, date);
        }
    }
}
